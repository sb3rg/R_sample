{
    "collab_server" : "",
    "contents" : "source( \"helpers.R\" )\n## --- IMPORT DATA --- \n  ## Step 1: copy data to excel spreadsheet\n  \n  ## Step 2: remove all formatting via clear>all formatting.\n  ##  make sure that date-time fields are in excel number format i.e. 40802.09\n  ##  make sure that all \"\" values are replaced with null in excel\n  ##   copy data set into new sheet--values only > click find > search for \"\" text > replace with \"null\" (check match entire contents) > replace \"null\" with blank\n  \n  raw <- import_raw( \"Data.csv\" )\n\n## --- COPY DATA SET ---\n\n  copy <- as.data.table( raw )\n  \n\n## --- ADD ADDITIONAL FIELDS ---\n  ## add durations of interest\n  copy[, ':=' ( Seen.to.Dispo, ( First.ED.Dispo - Seen.MD.PA ) * 24 * 60 ) ]\n  copy[, ':=' ( Roomed.to.ED.Depart, ( Ed.Depart - Seen.MD.PA ) * 24 * 60 ) ]\n  copy[, ':=' ( Arrive.to.ED.Depart, ( Ed.Depart - ED.Arrive ) * 24 * 60 ) ]\n  copy[, ':=' ( Dispo.to.ED.Depart, ( Ed.Depart - First.ED.Dispo ) * 24 * 60 ) ]\n  \n  ## add custom ESI groupings\n  copy[, c( \"ESI_Group\" ) := list( ifelse( as.integer( Acuity.Level.C ) <= 2,\n                                           \"ESI 1-2\",\n                                           ifelse( as.integer( Acuity.Level.C ) > 3,\n                                                   \"ESI 4-5\",\n                                                   \"ESI 3\" ) ) ) ]\n\n  \n  ## calc posix time\n  temp <- as.POSIXlt(\n    as.POSIXct( copy$ED.Arrive * (60 * 60 * 24),\n               origin = \"1899-12-30\",\n               tz = \"GMT\"),\n    origin = \"1899-12-30\", tz = \"GMT\"\n  )\n  \n  ## add date properties to census data table\n  copy[, c(\"mday\",\n           \"wday\",\n           \"yday\",\n           \"month\",\n           \"year\",\n           \"hour\") := list(\n             temp$mday,\n             ifelse(temp$wday == 0, 7, temp$wday),\n             1 + temp$yday,\n             1 + temp$mon,\n             1900 + temp$year,\n             temp$hour\n           )]\n  \n## -- FILTERS AND GRAPHS --\n  \n  \n  \n  # helper to process data given a filter and variable description\n  gen_boxplot <- function( DT, filter, x_field, y_field, by_categories, var_descr, clarifier ) {\n    type <- \"Box+Wh\"\n    by_cat <- by_categories\n    x_field <- x_field\n    DT <- DT[ eval( filter ) ]\n    \n    DT %>%\n      my_boxplot( x_field, y_field, by_cat ) %>%\n      my_ggsave(type = type,\n                var_descr = var_descr,\n                clarifier = clarifier, 11, 8.5)\n    \n    ## return filtered data\n    DT\n  }\n  \n  ## generate and save graphs for each variable of interest\n  gen_duration_boxplots <- function( copy, clarifier, by_categories ) {\n    # Filter to be used by all other filters\n    common_filter <- bquote( !is.na( Acuity.Level.C ) &\n                               Arrive.Hour >= 10 & Arrive.Hour <= 22)\n    \n    arr_Rm_filter <-\n      bquote(.(common_filter) &\n               `Arrive.to.Roomed` > 0  & `Arrive.to.Roomed` < 180)\n    rm_MD_filter <-\n      bquote(.(common_filter) &\n               `Roomed.to.Seen` > 0  & `Roomed.to.Seen` < 120 )\n    md_Dispo_filter <-\n      bquote(.(common_filter) &\n               `Seen.to.Dispo` > 0  & `Seen.to.Dispo` < 400 )\n    dispo_DC_filter <-\n      bquote(.(common_filter) &\n               `Dispo.to.ED.Depart` > 0  & `Dispo.to.ED.Depart` < 500 )\n    bed_DC_filter <-\n      bquote(.(common_filter) &\n               `Roomed.to.ED.Depart` > 0  & `Roomed.to.ED.Depart` < 600 )\n    arr_DC_filter <-\n      bquote(.(common_filter) &\n               `Arrive.to.ED.Depart` > 0 & `Arrive.to.ED.Depart` <600 )\n    \n    ## ARRIVAL TO ROOM\n    gen_boxplot(\n      copy, arr_Rm_filter, quote(`Arrive.Hour`), quote(`Arrive.to.Roomed`), by_categories,\"Arrival to Room by Hr\", clarifier\n    ) %>% my_stats( quote(`Arrive.to.Roomed`), by_categories ) %>% my_export( \"Arrival to Room\" )\n    ## ROOM TO PROVIDER\n    gen_boxplot(\n      copy, rm_MD_filter, quote(`Arrive.Hour`), quote(`Roomed.to.Seen`), by_categories,\"Room to Provider by Hr\", clarifier\n    )\n    ## PROVIDER TO DISPOSITION\n    gen_boxplot(\n      copy, md_Dispo_filter, quote(`Arrive.Hour`), quote(`Seen.to.Dispo`), by_categories,\"Provider to dispo by Hr\", clarifier\n    )\n    ## DISPOSITION TO DISCHARGE\n    gen_boxplot(\n      copy, dispo_DC_filter, quote(`Arrive.Hour`), quote(`Dispo.to.ED.Depart`), by_categories,\"Dispo to Discharge by Hr\", clarifier\n    )\n    ## ROom TO DISCHARGE\n    gen_boxplot(\n      copy, bed_DC_filter, quote(`Arrive.Hour`), quote(`Roomed.to.ED.Depart`), by_categories,\"Room to Discharge by Hr\", clarifier\n    )\n    ## ARRIVAL TO DISCHARGE\n    gen_boxplot(\n      copy, arr_DC_filter, quote(`Arrive.Hour`), quote(`Arrive.to.ED.Depart`), by_categories,\"Arrival to Discharge by Hr\", clarifier\n    )\n    \n    \"OK\"\n  } \n  \n  ## execute box plot creation\n  gen_duration_boxplots( copy[ Std.ED.Dispo != \"BOP\" ], \"(all days)\", c(\"Std.ED.Dispo\", \"ESI_Group\") )\n  gen_duration_boxplots( copy[ Std.ED.Dispo != \"BOP\" & year == 2014 ], \"(all days 2014)\", c(\"Std.ED.Dispo\", \"ESI_Group\") )\n  gen_duration_boxplots( copy[ Std.ED.Dispo != \"BOP\" & year == 2015 ], \"(all days 2015)\", c(\"Std.ED.Dispo\", \"ESI_Group\") )\n  gen_duration_boxplots( copy[ Std.ED.Dispo != \"BOP\" & year == 2016 ], \"(all days 2016)\", c(\"Std.ED.Dispo\", \"ESI_Group\") )\n  \n  ## --- FILTER SUBSET FOR TOP 80TH PERCENTILE ---\n  top_80_perc <- unique( copy[, .N, by = Arrive.MM.DD.YYYY ][ N >= 185 , Arrive.MM.DD.YYYY ] )\n  \n  copy.top <- copy[ Arrive.MM.DD.YYYY %in% top_80_perc ]\n  \n  gen_duration_boxplots( copy.top, \"(top 80th perc days)\", c(\"Std.ED.Dispo\", \"ESI_Group\") )\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n\n## --- REMOVE UNDESIRED VARIABLES ---\n  \n  copy[, c(\"Age.Years\",\n           \"Age.Months\",\n           \"Gender\",\n           \"Means.Of.ARRR.C\",\n           \"EVENT_TIME_firstbed\",\n           \"EVENT_TIME_lastbed\",\n           \"PROCEDURE_DESC\",\n           \"Acuity\",\n           \"ED.Disposition.C\",\n           \"Disch.Disp.C\",\n           # \"Arrive.MM.DD.YYYY\",\n           \"Arrive.Week\",\n           \"Arrive.DOW\",\n           \"Arrive.DOW..\",\n           \"Arrive.Hour\",\n           \"LOS\",\n           \"Arrive.to.Roomed\",\n           \"Arrived.to.Reg.Comp\",\n           \"Arrived.to.Seen\",           \n           \"Arrived.to.First.Ed.Disp\",\n           \"Arrived.to.Triage\",\n           \"Roomed.to.Seen\",\n           \"Roomed.to.Depart\",\n           \"Roomed.to.First.ED.Dispo\",\n           \"First.Ed.Disp.to.Discharge\",\n           \"First.Ed.Disp.to.Admit\",\n           \"Seen.to.Depart\",\n           \"Arrival.DT.2\",\n           \"Arrival.DT.3\" ) := list( NULL ) ]\n  \n## --- TRANSFORM / RESHAPE DATA ---\n  ## --- Melt Timestamps ---\n  ## Assign melted ID vars\n  keycols <- c( \"CSN\",\n                \"Ed.Episode.ID\",\n                \"Means.Of.Arrival\",\n                \"Acuity.Level.C\",\n                \"Ed.Dispo\",\n                \"Disch.Dispo\",\n                \"Arrive.MM.DD.YYYY\",\n                \"Means.of.Depart\",\n                \"ROOM_ID_firstbed\",\n                \"ROOM_NAME_firstbed\",\n                \"BED_ID_firstbed\",\n                \"ROOM_ID_lastbed\",\n                \"ROOM_NAME_lastbed\",\n                \"BED_ID_lastbed\",\n                \"Std.ED.Dispo\" )\n  \n  ## melt time stamps data\n  melted <- as.data.table( melt( copy, id.vars = keycols ) )\n  \n  ## Assign table key for sorting timestamps\n  keycols <- c( keycols, \"value\" )\n  \n  ## sort data and filter NA's and Zero's (make sure 'from' is of type char)\n  ## add rename event type to \"from\"\n  copy <- melted[ i = !is.na( value ) & value != 0,\n                  j = list( from = as.character( variable ) ), keyby = keycols ]\n  \n  \n  ## --- Calculate 'From --> To' Durations ---\n\n  ## add new column that adds an index counter for the key set of interest   \n  keycols <- c( \"Ed.Episode.ID\" ) #sub-index by billing number\n  copy[, ':=' ( subid, .SD[, j = list( .I )] ), keyby = keycols ]\n  \n  ## --- Map 'From --> To' ---\n  ## create a new column that contains 1 position shifts (upwards) of time stamp key\n  copy[, c( 'to' ) := list( c( tail( from, -1 ), \n                               head( from, 1 ) ) ), by = keycols ]\n  \n  ## create a new column that contains 1 position shifts (upwards) of time stamp values\n  copy[, c( 'to_value' ) := list( c( tail( value, -1 ),\n                                     head( value, 1 ) ) ), \n       by = keycols ]\n  \n  ## remove last item to eliminate equivalent records\n  copy[, ':=' ( maxID, .SD[, j = list( max( subid ) )]), keyby = keycols ]\n  copy <- copy[ subid != maxID ]\n  \n  ## calculate durations\n  copy[, c( 'duration' ) := list( ( to_value - value ) * 24 * 60 ) ]\n  \n  ## create a new column that contains concatenated start-stop character pairs\n  copy[, c( 'from --> to' ) := list( paste( from, to, sep = \" --> \" ) ), by = keycols ]\n\n  \n  ## --- FILTER SUBSET FOR TOP 50TH PERCENTILE ---\n  top_80_perc <- unique( as.data.table( raw )[, .N, by = Arrive.MM.DD.YYYY ][ N >= 185 , Arrive.MM.DD.YYYY ] )\n  \n  copy.top <- copy[ Arrive.MM.DD.YYYY %in% top_80_perc ]\n  # copy <- as.data.table( raw )[ Arrive.MM.DD.YYYY %in% top_50_perc ]\n  \n  \n  ## --- CONSOLIDATE AND PRINT ---\n\n  ## export data to csv\n  my_export( copy, \"filtered\" )\n  \n  \n  \n  \n## --- GENERATE GRAPHS ---\n  DT <- copy( copy )\n  \n  #### --- HISTOGRAMS --- \n  DT.LOS <- DT[ duration > 0 &  duration < 1440 ]\n  \n  # calculate the mean, median and mode of each category\n  DT.stats <- DT.LOS[, j = .SD[, list( n = .N,\n                                       mean = floor( mean(duration) ), \n                                       med = floor( median( duration ) ),\n                                       mode = floor( Mode( duration ) ),\n                                       std.dev = floor( sd( duration ) ),\n                                       x_label_pos = ( max( duration ) - min( duration ) ) * 0.5,\n                                       y_label_pos = 1 ) ], ## place holder\n                     keyby = c( \"from --> to\", \"from\", \"to\", \"Std.ED.Dispo\", \"Acuity.Level.C\" ) ]\n  \n  # get list of valid from --> to paths based on practical frequency (99th percentile)\n  keep <- c( \"ETC.Expected --> Triage.Comp\",\n             \"ETC.Expected --> Roomed\",\n             \"ED.Arrive --> Triage.Comp\",\n             \"ED.Arrive --> Roomed\",\n             \"Triage.Comp --> Roomed\",\n             \"Triage.Comp --> Reg.Comp\",\n             \"Triage.Comp --> Seen.MD.PA\",\n             \"Roomed --> Reg.Comp\",\n             \"Roomed --> Seen.MD.PA\",\n             \"Roomed --> Triage.Comp\",\n             \"Reg.Comp --> Seen.MD.PA\",\n             \"Reg.Comp --> Disch.Dispo.Select\",\n             \"Reg.Comp --> Roomed\",\n             \"Reg.Comp --> Admit.Dispo.Selected\",\n             \"Reg.Comp --> Ed.Depart\",\n             \"Seen.MD.PA --> Disch.Dispo.Select\",\n             \"Seen.MD.PA --> Admit.Dispo.Selected\",\n             \"Seen.MD.PA --> Ed.Depart\",\n             \"Seen.MD.PA --> Reg.Comp\",\n             \"Seen.MD.PA --> Triage.Comp\",\n             \"First.ED.Dispo --> Ed.Depart\",\n             \"First.ED.Dispo --> Hospital.Discharge\",\n             \"First.ED.Dispo --> Trans.to.OTF\",\n             \"Trans.to.OTF --> Ed.Depart\",\n             \"Trans.to.OTF --> Hospital.Discharge\" )\n  \n  \n  \n  my_export( DT.stats[ `from --> to` %in% keep ], \"from-to_durations\" )\n  \n  \n  \n  \n  \n### BELOW THIS LINE DOES NOT WORK! ###\n  DT.panel.stats <- DT.LOS[, j = .SD[, list( n = .N,\n                                            mean = floor( mean(duration) ), \n                                            med = floor( median( duration ) ),\n                                            mode = floor( Mode( duration ) ),\n                                            std.dev = floor( sd( duration ) ),\n                                            x_label_pos = ( max( duration ) - min( duration ) ) * 0.5,\n                                            y_label_pos = 1 ) ], ## place holder\n                          keyby = c( \"from --> to\" ) ]\n\n  \n  \n  p <- ggplot( DT.LOS[ `from --> to` %in% keep ], aes( x = duration ) ) +\n    geom_histogram( aes( y = (..count..) / sum( ..count.. ) ), \n                    binwidth = 5, \n                    fill = \"cornflowerblue\", \n                    color = \"white\", \n                    size = .01 ) +\n    scale_y_continuous( labels = percent )\n  \n  ## faceted in wrapping arranged subpanels\n  p <- p + facet_wrap( from ~ to, scales = \"free\" )\n  \n  DT.plot <- as.data.table( layer_data( p ) )\n  DT.plot <- DT.plot[, j = .SD[, list( max( y ) ) ], \n                     by = c( \"PANEL\" ) ]\n  DT.panel.stats <- DT.panel.stats[ `from --> to` %in% keep]\n  DT.panel.stats[, ':=' ( y_label_pos = DT.plot$V1 ) ]\n  \n  # add mean and median labels to plots and specified location\n  p <- p + geom_text( data = DT.panel.stats, aes( x = x_label_pos, \n                                            y = y_label_pos, \n                                            label = paste(\"Mean:  \", mean ) ) )\n  p <- p + geom_text( data = DT.panel.stats, aes( x = x_label_pos, \n                                            y = y_label_pos * 0.9, \n                                            label = paste(\"Median:  \", med ) ) )\n  \n  ## use black and white theme\n  p + theme_bw()\n  ",
    "created" : 1510350880177.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1468247933",
    "id" : "685A1B42",
    "lastKnownWriteTime" : 1484691748,
    "last_content_update" : 1484691748,
    "path" : "C:/Users/glseanb/Google Drive/R/Workspace/2017-01 CCED/analysis.R",
    "project_path" : "analysis.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}