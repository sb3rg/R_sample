{
    "contents" : "#install.packages( \"data.table\" )\n#install.packages( \"magrittr\" )\n#install.packages( \"ggplot2\" )\n#install.packages( \"scales\" )\n# install.packages( \"curry\" )\nlibrary( curry )\nlibrary( data.table )\nlibrary( magrittr )\nlibrary( ggplot2 )\nlibrary( scales )\n\n\n\n## helper to automate typical csv file import steps\nimport_raw <- function ( filename ) {\n  fileName <- filename\n  \n  ## import headers first to determine classes\n  initial <- read.csv( file = fileName,\n                       stringsAsFactors = FALSE, \n                       nrows = 100000 )\n  \n  ## determine class of each column variable\n  classes <- sapply( initial, class )\n  \n  ## import rest of data\n  ptm <- proc.time()\n  initial <- read.csv( file = fileName,\n                       stringsAsFactors = FALSE, \n                       colClasses = classes,\n                       nrows = 5611771, # 5611771\n                       comment.char = \"\" )\n  print( proc.time() - ptm )\n  \n  ## import data set from csv while assigning corresponding classes\n  #raw = read.csv( fileName, \n  #               colClasses = classes )\n  raw <- initial\n}\n\n\n\n### --- BEGIN CALC HELPER FUNCTIONS ---\n#\n\n## helper to replace char timestamps with numeric, excel-friendly datetime values\n#ex: as.excel_DT( \"10/01/2016 12:00:00 AM\" )\nas.excel_DT <- function( char_DT ) {\n  # define excel time origin if not defined\n  if( !exists( \"origin\" ) ) {\n    origin <- as.POSIXct( x = \"1899-12-30 00:00\", tz = \"UTC\" ) \n  }\n  \n  #\n  strptime( x = char_DT,\n            format = \"%m/%d/%Y %I:%M:%S %p\", \n            tz = \"UTC\" ) %>%\n    difftime( origin, units = \"days\" ) %>%\n    as.numeric\n}\n\n# helper for calculating hours\nto.excel_Hr <- function( excel_DT ) {\n  as.integer( floor( mod( excel_DT, 1 ) * 24 ) )\n}\n\n## helper function for calculating the mode\nMode <- function(x) {\n  ux <- unique(x)\n  ux[which.max(tabulate(match(x, ux)))]\n}\n\n#\n### --- END CALC HELPER FUNCTIONS ---\n\n\n\n### --- BEGIN GRAPH HELPER FUNCTIONS ---\n#\n\n## helper function to show numeric decimal places\nshow_decimal <- function(x, k) format(round(x, k), nsmall=k)\n\n# helper function for displaying histograms\nmy_histo <- function( DT, field_name, min_range, max_range, by_category ) {\n  field <- field_name\n  \n  DT.LOS <- DT[ eval( field ) > min_range &  eval( field ) < max_range ]\n  \n  p <- ggplot( DT.LOS, aes( x = eval( field ) ) ) +\n    geom_histogram( aes( y = (..count..) / sum( ..count.. ) ), \n                    binwidth = 1, \n                    fill = \"cornflowerblue\", \n                    color = \"white\", \n                    size = .01 ) +\n    scale_y_continuous( labels = percent )\n  \n  # calculate the mean, median and mode of each facet\n  DT.stats <- DT.LOS[, j = .SD[, list( n = .N,\n                                       mean = floor( mean(eval( field )) ), \n                                       med = floor( median( eval( field ) ) ),\n                                       mode = floor( Mode( eval( field ) ) ),\n                                       std.dev = floor( sd( eval( field ) ) ),\n                                       x_label_pos = ( max( eval( field ) ) - min( eval( field ) ) ) * 0.5,\n                                       y_label_pos = 1 ) ], ## place holder\n                     keyby = by_category ] ## \"keyby\" sorts \"by\" does not\n  #\"DISPOSITION ) ]\n  \n  ## faceted in wrapping arranged subpanels\n  # p <- p + facet_wrap( ~ TRIAGE_CATEGORY, scales = \"free\" )\n  \n  # calculate % grand total for y_label using plotted data\n  DT.plot <- as.data.table( layer_data( p ) )\n  DT.plot <- DT.plot[, j = .SD[, list( max( y ) ) ], \n                     by = c( \"PANEL\" ) ]\n  DT.stats <- DT.stats[, ':=' ( y_label_pos = DT.plot$V1 ) ]\n  \n  \n  # add mean and median labels to plots and specified location\n  p <- p + geom_text( data = DT.stats, aes( x = x_label_pos, \n                                            y = y_label_pos, \n                                            label = paste(\"Mean:  \", mean ) ) )\n  p <- p + geom_text( data = DT.stats, aes( x = x_label_pos, \n                                            y = y_label_pos * 0.9, \n                                            label = paste(\"Median:  \", med ) ) )\n  \n  ## export data to csv\n  fileName <- paste( deparse( field ), \"_stats\", sep = \"\" )\n  fileExt <- \".csv\"\n  write.table( DT.stats, \n               file      = paste( \"./\", fileName, fileExt ), \n               sep       = \",\",\n               row.names = TRUE, \n               col.names = NA )\n  \n  ## use black and white theme\n  p + theme_bw()\n}\n\n\n# helper function to save plots to file\nmy_ggsave <- function( plot, type, var_descr, clarifier, width, height ) {\n  date_today <- as.character( Sys.Date() )\n  img_type <- \".png\"\n  file_name <- c( date_today, type, var_descr, clarifier, img_type )\n  \n  ggsave(\n    filename = paste( file_name, collapse = \" \" ),\n    width = width,\n    height = height,\n    units = \"in\",\n    dpi = 600,\n    path = \"graphs\"\n  )\n}\n\n# helper to print data into csv tables\nmy_export <- function( DT.stats, field_name ) {\n  date_today <- as.character( Sys.Date() )\n  fileName <- paste( field_name, \"_table\", sep = \"\" )\n  fileExt <- \".csv\"\n  full_name <- paste( c( date_today, fileName, fileExt ), collapse = \" \" )\n  \n  write.table( DT.stats,\n               file      = paste( \"./results/\", full_name ), \n               sep       = \",\",\n               row.names = TRUE, \n               col.names = NA )\n  \n  full_name\n}\n\n\n## helper function to calculate box plot stats\nmy_stats <- function(DT, field, by_categories) {\n  # calculate the mean, median, mode and std deviation of each facet\n  DT[ !is.na( eval(field) ), j = .SD[, list(\n    n = .N,\n    mean = mean(eval(field)),\n    med = as.numeric( median(eval(field)) ),\n    mode = Mode(eval(field)),\n    std.dev = sd(eval(field))\n  )],\n  keyby = by_categories ]\n}\n\n## helper function to calculate label positions\nadd_label_pos <- function( p, DT.stats ) {\n  # calculate positions of x and y labels for annotations and add to stats DT\n  DT.plot <- as.data.table( layer_data( p ) )\n  DT.plot <-\n    DT.plot[, j = .SD[, list(max(ymax_final),\n                             (max(x) - min(x)) * 0.5)],\n            by = c(\"PANEL\")]\n  DT.stats[, ':=' (y_label_pos = DT.plot$V1,\n                   x_label_pos = DT.plot$V2)]\n}\n\n## helper function to generate box plot graphs\nmy_boxplot <- function( DT, x_field, y_field, by_categories ) {\n  # convert category string to variable for facet grid\n  facet_by_cat <- parse(text = paste(\"~\",\n                                     Reduce(\n                                       function(x, y)\n                                         paste(x, y, sep = \" + \"),\n                                       by_categories\n                                     ),\n                                     sep = \" \"))\n  \n  # collect stats\n  DT.stats <- my_stats(DT, y_field, by_categories)\n  \n  # make variable factor so it can be discrete on x-axis\n  DT[, \":=\" ( eval( x_field ), as.factor( eval( x_field ) ) )  ]\n  \n  \n  # create base plot\n  p <- ggplot( DT, \n               aes( x = eval( x_field ), y = eval( y_field ) ) ) + \n    geom_boxplot() +\n    facet_grid( eval( facet_by_cat ) )\n  \n  # calculate label positions and add them to stats table\n  add_label_pos( p, DT.stats )\n  \n  # add mean label to plot at specified location\n  p <- p + geom_text(data = DT.stats, aes(\n    x = x_label_pos,\n    y = y_label_pos,\n    label = paste(\"Mean:  \",\n                  show_decimal(mean, 1))\n  ))\n  \n  p <- p + geom_hline(\n    data = DT.stats,\n    aes(yintercept = mean,\n        color = \"darkred\"),\n    linetype = \"dashed\",\n    size = 1\n  )\n  \n  #   p <- p + scale_y_continuous(\n  #     trans = log2_trans(),\n  #     breaks = 2^(-7:7),\n  #     # breaks = trans_breaks(\"log2\", function(x) 2^x),\n  #     labels = trans_format(\"log2\", math_format(2^.x))\n  #   )\n  \n  p <- p + theme_bw() + theme( legend.position = \"none\" )\n}\n\n#\n### --- END GRAPH HELPER FUNCTIONS ---",
    "created" : 1484681009290.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3886004923",
    "id" : "B0836826",
    "lastKnownWriteTime" : 1484687891,
    "path" : "C:/Users/glseanb/Google Drive/R/Workspace/2017-01 CCED/helpers.R",
    "project_path" : "helpers.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}